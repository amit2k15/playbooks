import requests
import pandas as pd
from datetime import datetime, timedelta

# Zabbix API information
zabbix_url = "http://your_zabbix_server/zabbix/api_jsonrpc.php"
zabbix_user = "your_zabbix_username"
zabbix_password = "your_zabbix_password"

# Set the age limit for problems (in seconds)
age_limit_seconds = 24 * 60 * 60  # 1 day

# Host groups to retrieve data for
host_groups = ['abc', 'def', 'ghi']

def get_zabbix_data():
    # Zabbix API authentication
    auth_payload = {
        "jsonrpc": "2.0",
        "method": "user.login",
        "params": {
            "user": zabbix_user,
            "password": zabbix_password
        },
        "id": 1,
        "auth": None
    }

    response = requests.post(zabbix_url, json=auth_payload)
    auth_result = response.json()

    if 'result' in auth_result:
        auth_token = auth_result['result']
        print("Zabbix API authentication successful.")
    else:
        raise Exception("Zabbix API authentication failed.")

    # Get host group IDs
    host_group_ids = []
    for group in host_groups:
        get_group_payload = {
            "jsonrpc": "2.0",
            "method": "hostgroup.get",
            "params": {
                "output": ["groupid"],
                "filter": {
                    "name": group
                }
            },
            "id": 2,
            "auth": auth_token
        }

        response = requests.post(zabbix_url, json=get_group_payload)
        group_result = response.json()

        if 'result' in group_result and group_result['result']:
            group_id = group_result['result'][0]['groupid']
            host_group_ids.append(group_id)
        else:
            print(f"Failed to get ID for host group '{group}'")

    # Get problems for specified host groups and age limit
    end_time = int(datetime.now().timestamp())
    start_time = end_time - age_limit_seconds

    problems_payload = {
        "jsonrpc": "2.0",
        "method": "problem.get",
        "params": {
            "output": ["severity"],
            "groupids": host_group_ids,
            "time_from": start_time,
            "time_till": end_time,
            "selectAcknowledges": "extend",
            "sortfield": "eventid",
            "sortorder": "DESC",
            "limit": 100,  # You can adjust the limit based on your needs
        },
        "id": 3,
        "auth": auth_token
    }

    response = requests.post(zabbix_url, json=problems_payload)
    problems_result = response.json()

    if 'result' in problems_result:
        return problems_result['result']
    else:
        print("Failed to retrieve problems from Zabbix.")
        return []

def create_excel_report(problems_data):
    # Create a DataFrame from the Zabbix data
    df = pd.DataFrame(problems_data)

    # Count the occurrences of each severity level
    severity_counts = df['severity'].value_counts().sort_index()

    # Create an Excel writer
    with pd.ExcelWriter('zabbix_problems_report.xlsx', engine='xlsxwriter') as writer:
        # Write the summary sheet
        severity_counts.to_excel(writer, sheet_name='Summary', header=['Count'])

        # Write the raw data sheet
        df.to_excel(writer, sheet_name='Raw Data', index=False)

if __name__ == "__main__":
    zabbix_data = get_zabbix_data()
    create_excel_report(zabbix_data)
