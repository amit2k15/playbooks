from pyzabbix import ZabbixAPI
import pandas as pd

# Zabbix server details
ZABBIX_SERVER = 'http://your_zabbix_server'
ZABBIX_USERNAME = 'your_username'
ZABBIX_PASSWORD = 'your_password'

# Connect to Zabbix API
zapi = ZabbixAPI(ZABBIX_SERVER)
zapi.login(ZABBIX_USERNAME, ZABBIX_PASSWORD)

def get_web_scenarios(hostgroup_name):
    # Get hostgroup ID
    hostgroup = zapi.hostgroup.get(filter={"name": hostgroup_name})
    if not hostgroup:
        print(f"No hostgroup found with the name {hostgroup_name}")
        return
    hostgroup_id = hostgroup[0]['groupid']

    # Get hosts in the hostgroup
    hosts = zapi.host.get(groupids=hostgroup_id)
    host_ids = [host['hostid'] for host in hosts]

    # Get web scenarios
    web_scenarios = zapi.httptest.get(hostids=host_ids, output=['name', 'hostid', 'status', 'delay'], selectSteps=['name', 'url'])
    
    data = []
    for scenario in web_scenarios:
        hostname = next(host['name'] for host in hosts if host['hostid'] == scenario['hostid'])
        scenario_name = scenario['name']
        delay = scenario['delay']
        status = 'Enabled' if scenario['status'] == '0' else 'Disabled'

        for step in scenario['steps']:
            url = step['url']

            # Get triggers for the web scenario
            triggers = zapi.trigger.get(httptestids=scenario['httptestid'], output=['description', 'priority', 'status'])
            for trigger in triggers:
                trigger_name = trigger['description']
                severity = trigger['priority']
                severity_map = {'1': 'Minor', '2': 'Minor', '3': 'Warning', '4': 'Major'}
                trigger_severity = severity_map.get(severity, 'Unknown')
                trigger_status = 'Enabled' if trigger['status'] == '0' else 'Disabled'
                
                data.append([hostname, scenario_name, url, delay, status, trigger_name, trigger_severity, trigger_status])

    # Create DataFrame
    df = pd.DataFrame(data, columns=['Hostname', 'Web Scenario Name', 'URL', 'Delay', 'Scenario Status', 'Trigger Name', 'Trigger Severity', 'Trigger Status'])
    return df

hostgroup_name = 'Your Host Group Name'
df = get_web_scenarios(hostgroup_name)

# Save to Excel
df.to_excel(f'{hostgroup_name}_web_scenarios.xlsx', index=False)
print(f"Data has been saved to {hostgroup_name}_web_scenarios.xlsx")
