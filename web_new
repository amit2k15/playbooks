import pandas as pd
from pyzabbix import ZabbixAPI

# Zabbix server connection settings
zabbix_url = 'http://your-zabbix-server/zabbix'
zabbix_user = 'your_username'
zabbix_password = 'your_password'

# Initialize Zabbix API
zapi = ZabbixAPI(zabbix_url)
zapi.login(zabbix_user, zabbix_password)

def get_hostgroup_hosts_info(hostgroup_name):
    # Get host group ID
    hostgroup = zapi.hostgroup.get(filter={'name': hostgroup_name})
    if not hostgroup:
        raise ValueError(f"Host group '{hostgroup_name}' not found.")

    group_id = hostgroup[0]['groupid']

    # Get hosts in the host group
    hosts = zapi.host.get(groupids=group_id, output=['hostid', 'host'])

    data = []
    for host in hosts:
        host_id = host['hostid']
        host_name = host['host']

        # Get web scenarios for the host
        web_scenarios = zapi.httptest.get(hostids=host_id, selectSteps='extend')
        
        for scenario in web_scenarios:
            scenario_name = scenario['name']
            scenario_delay = scenario['delay']
            scenario_status = scenario['status']
            scenario_url = scenario['steps'][0]['url']

            # Get triggers for the scenario
            triggers = zapi.trigger.get(itemids=scenario['httptestid'], output=['description', 'priority', 'status'])
            for trigger in triggers:
                trigger_name = trigger['description']
                trigger_severity = trigger['priority']
                trigger_status = trigger['status']

                # Convert severity to the desired format
                if trigger_severity == '1':
                    severity = 'Information'
                elif trigger_severity == '2':
                    severity = 'Minor'
                elif trigger_severity == '3':
                    severity = 'Warning'
                elif trigger_severity == '4':
                    severity = 'Major'
                else:
                    severity = 'Unknown'

                data.append({
                    'Host': host_name,
                    'Web Scenario Name': scenario_name,
                    'Delay': scenario_delay,
                    'Status': scenario_status,
                    'URL': scenario_url,
                    'Trigger Name': trigger_name,
                    'Trigger Severity': severity,
                    'Trigger Status': trigger_status
                })

    return data

def save_to_excel(hostgroup_name, data):
    df = pd.DataFrame(data)
    file_name = f'{hostgroup_name}_web_scenarios_triggers.xlsx'
    df.to_excel(file_name, index=False)
    print(f"Data saved to {file_name}")

if __name__ == "__main__":
    hostgroup_name = 'Your_Host_Group_Name'
    hostgroup_info = get_hostgroup_hosts_info(hostgroup_name)
    save_to_excel(hostgroup_name, hostgroup_info)
