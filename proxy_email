import requests
import smtplib
from email.mime.text import MIMEText
from datetime import datetime

# Zabbix API configuration
zabbix_url = 'https://your-zabbix-server/zabbix/api_jsonrpc.php'
zabbix_user = 'your-zabbix-username'
zabbix_password = 'your-zabbix-password'
zabbix_host_group = 'Your Host Group'

# SMTP configuration
smtp_server = 'your-smtp-server'
smtp_from = 'amit_t@t.com'
smtp_to = 'kumaramitnayak@gmail.com'
email_subject = f'Zabbix Proxy Report {datetime.now().strftime("%Y-%m-%d")}'

# Zabbix item names
cpu_item = 'system.cpu.util'
memory_item = 'vm.memory.utilization'
queue_item = 'zabbix[queue,10m]'
uptime_item = 'system.uptime'
last_seen_item = 'zabbix[proxy,{HOST.HOST},lastaccess]'

# Zabbix API functions
def zabbix_login():
    data = {
        'jsonrpc': '2.0',
        'method': 'user.login',
        'params': {
            'user': zabbix_user,
            'password': zabbix_password,
        },
        'id': 1,
    }
    response = requests.post(zabbix_url, json=data)
    return response.json()['result']

def zabbix_logout(auth_token):
    data = {
        'jsonrpc': '2.0',
        'method': 'user.logout',
        'params': [],
        'id': 1,
        'auth': auth_token,
    }
    requests.post(zabbix_url, json=data)

def zabbix_get_hostgroup_hosts(auth_token, host_group_name):
    data = {
        'jsonrpc': '2.0',
        'method': 'hostgroup.get',
        'params': {
            'output': 'extend',
            'filter': {
                'name': [host_group_name]
            },
            'select_hosts': ['hostid', 'host']
        },
        'auth': auth_token,
        'id': 1,
    }
    response = requests.post(zabbix_url, json=data)
    return response.json()['result'][0]['hosts']

def zabbix_get_item_value(auth_token, host_id, item_key):
    data = {
        'jsonrpc': '2.0',
        'method': 'item.get',
        'params': {
            'output': 'extend',
            'hostids': host_id,
            'search': {
                'key_': item_key,
            },
            'sortfield': 'name',
        },
        'auth': auth_token,
        'id': 1,
    }
    response = requests.post(zabbix_url, json=data)
    return response.json()['result'][0]['lastvalue']

# Calculate last seen and uptime
def calculate_last_seen(last_seen):
    current_time_seconds = int(datetime.now().timestamp())
    last_seen_seconds = int(last_seen)
    return current_time_seconds - last_seen_seconds

def calculate_uptime(uptime_seconds):
    uptime_days = round(uptime_seconds / (24 * 3600), 2)
    return uptime_days

# Main script
try:
    # Zabbix login
    auth_token = zabbix_login()

    # Get hosts in the specified host group
    hosts = zabbix_get_hostgroup_hosts(auth_token, zabbix_host_group)

    # Prepare email body
    email_body = "Zabbix Proxy Report\n\n"
    email_body += f"{'Host':<20}{'CPU (%)':<10}{'Memory (%)':<15}{'Queue':<10}{'Uptime (days)':<15}{'Last Seen (seconds)':<20}\n"
    email_body += "=" * 90 + "\n"

    for host in hosts:
        host_id = host['hostid']
        host_name = host['host']

        # Get item values
        cpu_value = zabbix_get_item_value(auth_token, host_id, cpu_item)
        memory_value = zabbix_get_item_value(auth_token, host_id, memory_item)
        queue_value = zabbix_get_item_value(auth_token, host_id, queue_item)
        uptime_value = zabbix_get_item_value(auth_token, host_id, uptime_item)
        last_seen_value = zabbix_get_item_value(auth_token, host_id, last_seen_item)

        # Calculate last seen and uptime
        last_seen_seconds = calculate_last_seen(last_seen_value)
        uptime_days = calculate_uptime(float(uptime_value))

        # Add data to email body
        email_body += f"{host_name:<20}{cpu_value:<10}{memory_value:<15}{queue_value:<10}{uptime_days:<15}{last_seen_seconds:<20}\n"

    # Zabbix logout
    zabbix_logout(auth_token)

    # Send email
    email_body += "\nReport generated on: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    msg = MIMEText(email_body)
    msg['Subject'] = email_subject
    msg['From'] = smtp_from
    msg['To'] = smtp_to

    with smtplib.SMTP(smtp_server) as server:
        server.sendmail(smtp_from, [smtp_to], msg.as_string())

    print("Email sent successfully!")

except Exception as e:
    print(f"Error: {e}")
