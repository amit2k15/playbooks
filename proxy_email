import requests
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Zabbix API details
zabbix_url = 'http://your-zabbix-server/zabbix/api_jsonrpc.php'
zabbix_user = 'your-zabbix-username'
zabbix_password = 'your-zabbix-password'

# Zabbix host group and host name
host_group = 'Your Host Group'
host_name = 'Your Host Name'

# Zabbix item names
cpu_item = 'system.cpu.util'
memory_item = 'vm.memory.utilization'
queue_item = 'zabbix[queue,10m]'
uptime_item = 'system.uptime'
last_seen_item = 'zabbix[proxy,{HOST.HOST},lastaccess]'

# Zabbix API authentication
auth_payload = {
    'jsonrpc': '2.0',
    'method': 'user.login',
    'params': {
        'user': zabbix_user,
        'password': zabbix_password,
    },
    'id': 1,
}

auth_response = requests.post(zabbix_url, json=auth_payload)
auth_result = auth_response.json()

if 'error' in auth_result:
    raise ValueError(f"Zabbix authentication failed: {auth_result['error']['data']}")

auth_token = auth_result['result']

# Function to get item value from Zabbix
def get_zabbix_item_value(item_key, host_id):
    get_item_payload = {
        'jsonrpc': '2.0',
        'method': 'item.get',
        'params': {
            'output': 'extend',
            'hostids': host_id,
            'search': {'key_': item_key},
        },
        'auth': auth_token,
        'id': 2,
    }

    item_response = requests.post(zabbix_url, json=get_item_payload)
    item_result = item_response.json()

    if 'error' in item_result:
        raise ValueError(f"Failed to get Zabbix item {item_key}: {item_result['error']['data']}")

    if not item_result['result']:
        raise ValueError(f"Zabbix item {item_key} not found for host {host_id}")

    return item_result['result'][0]['lastvalue']

# Get host ID for the specified host name
get_host_payload = {
    'jsonrpc': '2.0',
    'method': 'host.get',
    'params': {
        'output': ['hostid'],
        'filter': {'host': host_name},
    },
    'auth': auth_token,
    'id': 3,
}

host_response = requests.post(zabbix_url, json=get_host_payload)
host_result = host_response.json()

if 'error' in host_result:
    raise ValueError(f"Failed to get host {host_name}: {host_result['error']['data']}")

if not host_result['result']:
    raise ValueError(f"Host {host_name} not found in Zabbix")

host_id = host_result['result'][0]['hostid']

# Get Zabbix item values
cpu_value = get_zabbix_item_value(cpu_item, host_id)
memory_value = get_zabbix_item_value(memory_item, host_id)
queue_value = get_zabbix_item_value(queue_item, host_id)
uptime_seconds = float(get_zabbix_item_value(uptime_item, host_id))
last_seen_timestamp = int(get_zabbix_item_value(last_seen_item, host_id))

# Calculate uptime in days
uptime_days = uptime_seconds / (24 * 60 * 60)

# Calculate last seen in seconds
current_time = datetime.now()
last_seen_seconds_ago = (current_time - datetime.fromtimestamp(last_seen_timestamp)).total_seconds()

# Prepare email content
email_body = f"""
CPU: {cpu_value:.2f}%
Memory: {memory_value:.2f}%
Queue: {queue_value}
Uptime: {uptime_days:.2f} days
Last Seen: {last_seen_seconds_ago:.2f} seconds ago
"""

# Email configuration
smtp_server = 'your-smtp-server'
smtp_port = 587
from_address = 'amit_t@t.com'
to_address = 'kumaramitnayak@gmail.com'
subject = f"Zabbix Proxy Report {current_time.strftime('%Y-%m-%d')}"

# Create the MIME object
message = MIMEMultipart()
message['From'] = from_address
message['To'] = to_address
message['Subject'] = subject
message.attach(MIMEText(email_body, 'plain'))

# Connect to the SMTP server and send the email
with smtplib.SMTP(smtp_server, smtp_port) as server:
    server.starttls()
    server.sendmail(from_address, to_address, message.as_string())

print(f"Email sent successfully to {to_address}")
